*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

h1{
    text-align: center;
    font-size: 45px;
}

.container{
    width: 600px;
    height: 500px;
    border: 1px solid black;
    margin: auto;
    position: absolute;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
}

.caja{
    width: 100px;
    height: 100px;
    border: 1px solid black;
    text-align: center;
    transition: all 1s;
    color: white;
    display: inline-block;
}

.rotate {
    background-color: red;
    top: 150px;
    left: 30px;
    /* transform: rotate(45deg); */
}

.translate {
    background-color: green;
    top: 150px;
    left: 150px;
    /* transform: translate(45px, 45px); */
}

.skew {
    background-color: blue;
    top: 150px;
    left: 270px;
    z-index: 2;
    /* transform: skew(0, 30deg); */
}

.scale {
    background-color: chocolate;
    top: 280px;
    left: 220px;
    /* transform: scale(2); */
}

.combinacion {
    background-color: violet;
    top: 280px;
    left: 90px;
    /* transform: translate(45px) rotate(45deg); */
}

/*
Rotate: Gira el elemento sobre su ejeX o sobre su ejeY
        tambien se puede girar sobre si mismo

Translate: Desplaza un elemento en el eje X (izquierda, derecha) tambien en el eje Y (arriba, abajo)

Skew: Inclina el elemento sobre su eje X o sobre su eje Y.

Scale: Escala ele elemento una determinada cantidad mas grande o mas peque√±a.

Transformaciones multiples: si queremos hacer multiples transform con diferentes funciones, siguiendo la herencia y cascada que se aplica en css.
la segunda propiedad transform sobreescribe a la anterior propiedad transform.

etiqueta{
    transform: rotate(5deg)
    transform: scale(2) // sobreescribe la anterior
}

para evitar esto. se hace una propiedad transform con distintos metodos separandolas con espacio

etiqueta{
    transform: rotate(5deg) scale(2) translate(25px, 150px)
}

Tipos de Transformaciones:

transform: rotate(grados);
transform: translate(ejeX, ejeY);
transform: skew(gradosX, gradosY);
transform: scale(escalarX, escalarY);

Combinando Transformaciones:
transform: tipo() tipo() tipo();
*/
